# A. Grammar: Tree Preprocessor; Author: Chubak Bidpaa
## This grammar is used to specify inline trees in C code

TreeDecl       <- "%tree" TreeStorage? TreeName TreeParent? TreeValue TreeLeft? TreeRight?

TreeStorage    <- "%static" / "%heap" 

TreeName       <- "%name" TreeIdent
TreeValue      <- "%value" TreeNode
TreeParent     <- "%parent" TreeIdent
TreeRight      <- "%right" TreeIdent
TreeLeft       <- "%left" TreeIdent

TreeIdent      <- Identifier 
TreeNode       <- Number / String / Identifier

Number         <- [0-9]+
String         <- '"' .* '"'
Identifier     <- [a-zA-Z_][a-zA-Z_]*

# B. Grammar: Exec Substitution Preprocessor; Author: Chubak Bidpaa
## This grammar is used to execute commands inline

ExecuteShellInline <- '`' .* '`' 

# C. Grammar: HerePP; Author: Chubak Bidpaa

HereStr        <- HereStarts .+ HereIdent 

HereStarts     <- .+ '=' "<<<" HereIdent 

HereIdent      <- "END_" Ident "_STR" 

Ident          <- [a-zA-Z_][a-zA-Z0-9]*

Digit          <- [0-9]+


# D. Grammar: Opcode Specifier; Author: Chubak Bidpaa
## This gramamr is used to specify opcodes

OpcodePP       <- OpcodeList Comment?

OpcodeList     <- OpcodeDecl ( ';' OpcodeDecl )*

Comment        <- "#" Text

OpcodeDecl     <- '%' OpcodeName "of" OperandName

OperandList    <- OperandName ( '*' OperandName )

OperandName    <- [a-z]+

OpcodeName     <- [A-Z]+

Identifier     <- [a-zA-Z_][a-zA-Z0-9_]*

Text           <- .*

# E. Grammar: Alloc Preprocessor; Author: Chubak Bidpaa
## This grammar is used to deal with automatic heap allocation in C

PreprocessorDirective <- 
    '#alloc' LexicalScope? Identifier AllocArguments Newline 
    / '#realloc' LexicalScope? Identifier ReallocArguments Newline

ReallocArguments <- '(' "size="? Size ',' "step="? Size ')'

AllocArguments   <- '(' "size="? Size ')'

LexicalScope     <- "%global" / "%function" Identifier

Size             <- .+

Identifier       <- [a-zA-Z_][a-zA-Z0-9]*

Newline          <- '\n'

IntegerLiteral   <- [0-9]+

# F. Grammar: Assembler Specifier; Author: Chubak Bidpaa
## This grammar is used to specify binarizers (assemblers) for a set of machine opcodes

AsmblerSpecs      <- Rule ( ';' Rule )* / Comment

Rule               <- Condition "=>" Action Newline

Action             <- "{{" .* "}}"

Condition          <- "%asm-cond" Opcode OperandList

Opcode             <- Identifier

OperandList        <- Operand ( ',' Operand )*

Operand            <- Register / Immediate

Immediate          <- "%imm" ( '(' ( Number / Identifier ) ')' )?

Register           <- "%reg" ( '(' Identifier ')' )?

Comment            <- "#" NoNewline* Newline

Newline            <- '\n'

Number            <- [0-9]+

Identifier        <- [a-zA-Z_][a-zA-Z0-9_]*

AnyText           <- .+

Character         <- .

NoNewline         <- !"\n"

# G. Grammar: Intermediate Language Opcode Specifier; Author: Chubak Bidpaa
## This grammar is used to specify intermediate representation opcodes

Specs           <- ( Instruction / Comment )+

Instruction     <- IROpcode ( ';' IROpcode )*

IROpcode       <- Opcode Group "||" TypeList

TypeList        <- Type ( ',' Type )*

Comment         <- "#" NoNewline+ '\n'

Group           <- Identifier

Type            <- "%i8" / "%i16" / "%i32" / "%i64"
                    / "%u8" / "%u16" / "%u32" / "%u64"
                    / "%f32" / "%f64" / "%string" / "%memloc" / "%none"

Opcode          <- Identifier

Identifier      <- [a-zA-Z_][a-zA-Z0-9_]*

Number          <- [0-9]+

NoNewline      <- !"\n"

# H. Grammar: Tree Expression Rewrite Specifier; Author: Chubak Bidpaa
## This grammar is used to specify tree rewrite cases for use with BURS algorithm

MainText       <- ( Rule / Comment )+

Rule           <- Lhs "=>" Rhs "\n;;\n"

Rhs            <- AltTree ( "\n||\n" AltTree )*
AltTree        <- Tree Cost

Lhs            <- Tree

Tree           <- Operand
                / Stub
                / Node '(' TreeBranches ')'

TreeBranches   <- TreeBranch ( ',' TreeBranch )?

TreeBranch     <- Operand
                / TreeInner 

Cost           <- '(' [0-9]+ ')'

Stub           <- Node

Operand        <- [a-z]+
Node           <- [A-Z]+

Comment        <- "--" ( !"\n")+ "\n"

# I. Grammar: Constant Folding Specifier; Author: Chubak Bidpaa
## This grammar is used to specify constant folding cases

Specs          <- ( Operation / Comment )+

Operation      <- OperationArity Opcode OperationName

OperationName  <- "&addition" / "&subtraction" / "&multiplication" / "&division"
                 / "&modulo" / "&assign" / "&logical_and" / "&logical_or"
                 / "&bitwise_and" / "&bitwise_or" / "&bitwise_xor" / "&left_shift"
                 / "&right_shift" / "&equal_to" / "&not_equal_to" / "&greater_than"
                 / "&less_than" / "&greater_than_or_equal_to" 
                 / "&less_than_or_equal_to" / "&unary_plus" / "&unary_minus" 
                 / "&logical_not" / "&bitwise_not"/ "&pre_increment" 
                 / "&pre_decrement" / "&address_of" / "&dereference"

OperationArity  <- "%unary" / "%binary"

Opcode         <- Identifier

Identifier     <- [A-Za-z_][A-Za-z0-9]*

Comment        <- "-- " ( !"\n")+ "\n"

# J. Grammar: Computation Reduction Specifier; Author: Chubak Bidpaa
## This grammar is used to specify cases of computation reduction in the IR, for example, variable induction in loops

MainSpecs           <- ( ReductionRuleList / Comment )+

ReductionRuleList  <- ReductionRule ( "\n" ReductionRule )*

ReductionRule       <- Lhs "=>" Rhs

Rhs                 <- "{{"  RhsContent+ "}}"

RhsContent         <- Text / '$' Label

Lhs                 <- SExpression / LabeledSExpression

LabeledSExpression  <- Label "::" SExpression

SExpression         <- Atom / List

Label               <- '{' Number '}'

Number              <- [0-9]+

List                <- '(' AtomList ')'

AtomList            <- Atom { Atom }

Atom                <- [-a-zA-Z0-9/=!^<>#|&\\\"\'%]+

Comment             <- "-- " CommentText Newline

CommentText         <- ( !"\n" )+

Newline             <- '\n'

Text                <- .*

# K. Grammar: Intermediate ML-like-to-C SDT Grammar; Author Chubak Bidpaa
## This grammar is a subset of ML, some DSLs are translated to this language --- and this language in turn is translated down to C

Program            <- Declaration*

Declaration        <- FunctionDeclaration 
                   / VariableDeclaration 
                   / DefineType
                   / DefineRecord

FunctionDeclaration <- "fun" Identifier '(' ParameterList? ')' ':' Type '=' Expression

VariableDeclaration <- "val" Identifier ':' Type '=' Expression

ParameterList      <- Identifier (',' Identifier)*

DefineRecord       <- "record" Identifier '=' Record

Record             <- '{' RecordPairList '}'

RecordPairList     <- RecordPair (';' RecordPair)*

RecordPair         <- Identifier ':' Type

RecordInstPair     <- Identifier '=' ( IdentifierPattern / LiteralPattern )

DefineType         <- "type" UserDefinedType '=' TypeVariantList

TypeVariantList    <- TypeVariant ('|' TypeVariant)*

TypeVariant        <- Identifier [ "of" TypeList ]

TypeList           <- Type ('*' Type)*

Type               <- "int" 
                   / "float" 
                   / "bool" 
                   / "char" 
                   / "string" 
                   / UserDefinedType

UserDefinedType    <- Identifier

ForExpression      <- "for" Expression "in" Expression "do" Expression "done"

IfExpression       <- "if" Expression "then" Expression "else" Expression "fi"

Expression         <- Literal
                   / Identifier
                   / '(' Expression ')'
                   / Identifier '(' ( IdentifierPattern / LiteralPattern ) ')'
                   / RecordInstPair
                   / Expression BinaryOperator Expression
                   / UnaryOperator Expression
                   / Match Expression "with" PatternMatches
                   / IfExpression
                   / ForExpression
                   / LocalExpression
                   / AssignmentExpression

LocalExpression    <- "local" Expression* "in" Expression* "end"

AssignmentExpression <- "let" Identifier '=' Expression "in"

Literal            <- IntegerLiteral 
		   / OctIntegerLiteral
		   / HexIntegerLiteral
		   / BinIntegerLiteral
                   / FloatLiteral 
                   / BoolLiteral 
                   / CharLiteral 
                   / StringLiteral

OctIntegerLiteral  <- OctDigit+ 'O'

BinIntegerLiteral  <- BinDigit+ 'B'

HexIntegerLiteral  <- HexDigit+ 'H'

IntegerLiteral     <- Digit+

FloatLiteral       <- Digit+ '.' Digit+

BoolLiteral        <- "true" / "false"

CharLiteral        <- "'" AnyChar "'"

StringLiteral      <- '"' AnyChar* '"'

BinaryOperator     <- '+' / '-' / '*' / '/' / "==" / "!=" / '<' / '>' / "<=" / ">=" / "&&" / "||"

UnaryOperator      <- '-' / "!" / "++" / "--"

ArgumentList       <- Expression (',' Expression)*

Identifier         <- [A-Za-z_][A-Za-z0-9_]*

AnyChar            <- .

BinDigit 	   <- [0-1]

OctDigit	   <- [0-7]

HexDigit 	   <- [0-9a-fA-F]

Digit              <- [0-9]

Match              <- "match" Expression "with" PatternMatches

PatternMatches     <- PatternMatch ('|' PatternMatch)*

PatternMatch       <- Pattern '->' Expression

Pattern            <- LiteralPattern / IdentifierPattern

LiteralPattern     <- IntegerLiteral / FloatLiteral / BoolLiteral / CharLiteral / StringLiteral

IdentifierPattern  <- Identifier [ '(' LiteralPattern ')' ]

