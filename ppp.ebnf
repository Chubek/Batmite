{{
	This project contains several preprocessors in Perl.

	- `treepp.pl`: Transforms tree grammars into instantiation of trees based on given macros/functions.
	- `execpp.pl`: Excutes inline commands and emits output.

	- `herepp.pl`: Preprocesses here-strings into legal C strings.

	- `opcodepp.pl`: A language used to describe opcodes, this script transforms it into several target forms.


	The grammar for all these preprocessors in given below.

}}

{ A. Grammar: TreePP; Author: Chubak Bidpaa }

tree-decl 	::= "%tree" [ tree-storage ] tree-name [ tree-parent] tree-value [ tree-left ] [ tree-right ] .

tree-storage    ::= "%static" | "%heap" .

tree-name 	::= "%name" tree-ident .
tree-value	::= "%value" tree-node .
tree-parent	::= "%parent" tree-ident .
tree-right 	::= "%right" tree-ident .
tree-left	::= "%left" tree-ident .

tree-ident	::= identifier .
tree-node	::= number | string | identifier .

number		::= ? any valid C numeric value ? .
string		::= ? any valid C string sequence ? .
identifier	::= ? any valid C identifier ? .


{ B. Grammar: ExecPP; Author: Chubak Bidpaa }

execute-shell-inline ::= '`' ? any ascii sequence ? '`' .

{ C. Grammar: HerePP; Author: Chubak Bidpaa }

here-str	::= here-starts ? valid ascii sequence ? here-ident .

here-starts     ::= ? any ascii sequence ? '=' "<<<" here-ident .

here-ident 	::= "END_" ident "_STR" .

ident 		::= letter { letter | digit | '_' } .

digit 		::= '0' | '1' | ... | '9'
letter 		::= 'A' | 'B' | 'C' | ... | 'z' .


{ D. Grammar: OpcodePP; Author: Chubak Bidpaa }

opcode-decl	::= "%opcode" [ '[' text ']' ] ':' name arity class [ internal ] .

internal	::= "%internal" .
class		::= "%class" word { '|' word } .
arity		::= "%arity" operand-type { ',' operand-type } .
name		::= "%name" opcode-name .

operand-type	::= "const" | "register" | "memory" | "none" .

word		::= { nonspacechar } .
text		::= { character } .
opcode-name	::= { uppsercase } .

uppercase 	::= 'A' | 'B" | 'C' | ... | 'Z' .
nonspacechar	::= ? any-valid-ASCI-letter-except-space ? .
character	::= ? any-valid-ASCII-letter ? .
