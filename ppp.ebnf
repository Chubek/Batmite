{{
	This project contains several preprocessors in Perl

	- `treepp.pl`: Transforms tree grammars into instantiation of trees based on given macros/functions
	- `execpp.pl`: Excutes inline commands and emits output

	- `herepp.pl`: Preprocesses here-strings into legal C strings

	- `opcodepp.pl`: A language used to describe opcodes, this script transforms it into several target forms

	- `allocpp.pl`: Generates heap allocations for a function or globally

	The grammar for all these preprocessors in given below

}}

{ A. Grammar: TreePP; Author: Chubak Bidpaa }

tree-decl 	::= "%tree" [ tree-storage ] tree-name [ tree-parent] tree-value [ tree-left ] [ tree-right ] 

tree-storage    ::= "%static" | "%heap" 

tree-name 	::= "%name" tree-ident 
tree-value	::= "%value" tree-node 
tree-parent	::= "%parent" tree-ident 
tree-right 	::= "%right" tree-ident 
tree-left	::= "%left" tree-ident 

tree-ident	::= identifier 
tree-node	::= number | string | identifier 

number		::= ? any valid C numeric value ? 
string		::= ? any valid C string sequence ? 
identifier	::= ? any valid C identifier ? 


{ B. Grammar: ExecPP; Author: Chubak Bidpaa }

execute-shell-inline ::= '`' ? any ascii sequence ? '`' 

{ C. Grammar: HerePP; Author: Chubak Bidpaa }

here-str	::= here-starts ? valid ascii sequence ? here-ident 

here-starts     ::= ? any ascii sequence ? '=' "<<<" here-ident 

here-ident 	::= "END_" ident "_STR" 

ident 		::= letter { letter | digit | '_' } 

digit 		::= '0' | '1' | ... | '9'
letter 		::= 'A' | 'B' | 'C' | ... | 'z' 


{ D. Grammar: OpcodePP; Author: Chubak Bidpaa }

opcode-pp	::= opcode-list [ { comment } ]

opcode-list 	::= opcode-decl { ';' opcode-decl }

comment		::= "--" text

opcode-decl	::= '%' opcode-name "of" operand-name

operand-list	::= operand-name { '*' operand-name }

operand-name	::= { lowercase }

opcode-name     ::= { uppercase }

identifier      ::= letter { letter | digit | '_' }

letter 		::= lowercase | uppercase

lowercase	::= 'a' | 'b' | ... | 'z'

uppercase       ::= 'A' | 'B' | ... | 'Z'

text		::= { any-char }

any-char	::= ? any-valid-ASCII-char ?

{ E. Grammar: AllocPP; Author: Chubak Bidpaa }

preprocessor-directive ::= 
	  '#alloc' [ lexical-scope ] identifier alloc-arguments newline 
	| '#realloc' [ lexical-scope ] identifier realloc-arguments newline

realloc-arguments ::= '(' [ "size=" ] size ',' [ "step=" ] size ')'

alloc-arguments ::= '(' [ "size=" ] size ')'

lexical-scope 	::= "%global" | "%function" identifier

size 		::= ? any-valid-text ?

identifier 	::= letter { letter | digit | '_' }

newline 	::= '\n'

integer-literal ::= digit { digit }

letter 		::= 'a' | 'b' | ... | 'z' | 'A' | 'B' | ... | 'Z'

digit 		::= '0' | '1' | ... | '8' | '9'

