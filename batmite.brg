// Declarations
%start expr
%term { IR_ADD = 1, IR_SUB = 2, IR_MUL = 3, IR_DIV = 4, IR_UDIV = 5, IR_UREM = 6, IR_POW = 7, IR_MOD = 8, IR_NEG = 9,
         IR_AND = 10, IR_OR = 11, IR_XOR = 12, IR_NOT = 13, IR_LSR = 14, IR_LSL = 15, IR_ASR = 16, IR_ULT = 17, IR_ULE = 18,
         IR_UGT = 19, IR_UGE = 20, IR_UEQ = 21, IR_UNE = 22, IR_LT = 23, IR_LE = 24, IR_GT = 25, IR_GE = 26, IR_EQ = 27,
         IR_NE = 28, IR_GOTO = 29, IR_RETURN = 30, IR_JUMP = 31, IR_JUMP_IF_TRUE = 32, IR_JUMP_IF_FALSE = 33, IR_BLIT = 34,
         IR_CALL = 35, IR_HALT = 36, IR_NOP = 37, IR_LOAD_QUAD = 38, IR_STORE_QUAD = 39, IR_LOAD_DOUBLE = 40,
         IR_STORE_DOUBLE = 41, IR_LOAD_HALF = 42, IR_STORE_HALF = 43, IR_LOAD_BYTE = 44, IR_STORE_BYTEi = 45,
         IR_NULL = 46, IR_ALLOCA_4B = 47, IR_ALLOCA_8B = 48, IR_ALLOCA_16B = 49, IR_TRUNC_QUAD2DOUBLE_S = 50,
         IR_TRUNC_QUAD2HALF_S = 51, IR_TRUNC_QUAD2BYTE_S = 52, IR_TRUNC_DOUBLE2HALF_S = 53, IR_TRUNC_DOUBLE2BYTE_S = 54,
         IR_TRUNC_HALF2BYTE_S = 55, IR_TRUNC_QUAD2DOUBLE_U = 56, IR_TRUNC_QUAD2HALF_U = 57, IR_TRUNC_QUAD2BYTE_U = 58,
         IR_TRUNC_DOUBLE2HALF_U = 59, IR_TRUNC_DOUBLE2BYTE_U = 60, IR_TRUNC_HALF2BYTE_U = 61, IR_EXTEND_DOUBLE2QUAD_S = 62,
         IR_EXTEND_HALF2QUAD_S = 63, IR_EXTEND_BYTE2QUAD_S = 64, IR_EXTEND_HALF2DOUBLE_S = 65, IR_EXTEND_BYTE2DOUBLE_S = 66,
         IR_EXTEND_BYTE2HALF_S = 67, IR_EXTEND_DOUBLE2QUAD_U = 68, IR_EXTEND_HALF2QUAD_U = 69, IR_EXTEND_BYTE2QUAD_U = 70,
         IR_EXTEND_HALF2DOUBLE_U = 71, IR_EXTEND_BYTE2DOUBLE_U = 72, IR_EXTEND_BYTE2HALF_U = 73, IR_COPY_DATA = 74 }

// Rules
expr : ADD(expr, expr) = 1;
expr : SUB(expr, expr) = 2;
expr : MUL(expr, expr) = 3;
expr : DIV(expr, expr) = 4;
expr : UDIV(expr, expr) = 5;
expr : UREM(expr, expr) = 6;
expr : POW(expr, expr) = 7;
expr : MOD(expr, expr) = 8;
expr : NEG(expr) = 9;
expr : AND(expr, expr) = 10;
expr : OR(expr, expr) = 11;
expr : XOR(expr, expr) = 12;
expr : NOT(expr) = 13;
expr : LSR(expr, expr) = 14;
expr : LSL(expr, expr) = 15;
expr : ASR(expr, expr) = 16;
expr : ULT(expr, expr) = 17;
expr : ULE(expr, expr) = 18;
expr : UGT(expr, expr) = 19;
expr : UGE(expr, expr) = 20;
expr : UEQ(expr, expr) = 21;
expr : UNE(expr, expr) = 22;
expr : LT(expr, expr) = 23;
expr : LE(expr, expr) = 24;
expr : GT(expr, expr) = 25;
expr : GE(expr, expr) = 26;
expr : EQ(expr, expr) = 27;
expr : NE(expr, expr) = 28;
expr : GOTO(TLABEL) = 29;
expr : RETURN(expr) = 30;
expr : JUMP(TLABEL) = 31;
expr : JUMP_IF_TRUE(expr, TLABEL) = 32;
expr : JUMP_IF_FALSE(expr, TLABEL) = 33;
expr : BLIT(expr, expr) = 34;
expr : CALL(expr) = 35;
expr : HALT = 36;
expr : NOP = 37;
expr : LOAD_QUAD(expr) = 38;
expr : STORE_QUAD(expr, expr) = 39;
expr : LOAD_DOUBLE(expr) = 40;
expr : STORE_DOUBLE(expr, expr) = 41;
expr : LOAD_HALF(expr) = 42;
expr : STORE_HALF(expr, expr) = 43;
expr : LOAD_BYTE(expr) = 44;
expr : STORE_BYTEi(expr, expr) = 45;
expr : NULL = 46;
expr : ALLOCA_4B = 47;
expr : ALLOCA_8B = 48;
expr : ALLOCA_16B = 49;
expr : TRUNC_QUAD2DOUBLE_S(expr) = 50;
expr : TRUNC_QUAD2HALF_S(expr) = 51;
expr : TRUNC_QUAD2BYTE_S(expr) = 52;
expr : TRUNC_DOUBLE2HALF_S(expr) = 53;
expr : TRUNC_DOUBLE2BYTE_S(expr) = 54;
expr : TRUNC_HALF2BYTE_S(expr) = 55;
expr : TRUNC_QUAD2DOUBLE_U(expr) = 56;
expr : TRUNC_QUAD2HALF_U(expr) = 57;
expr : TRUNC_QUAD2BYTE_U(expr) = 58;
expr : TRUNC_DOUBLE2HALF_U(expr) = 59;
expr : TRUNC_DOUBLE2BYTE_U(expr) = 60;
expr : TRUNC_HALF2BYTE_U(expr) = 61;
expr : EXTEND_DOUBLE2QUAD_S(expr) = 62;
expr : EXTEND_HALF2QUAD_S(expr) = 63;
expr : EXTEND_BYTE2QUAD_S(expr) = 64;
expr : EXTEND_HALF2DOUBLE_S(expr) = 65;
expr : EXTEND_BYTE2DOUBLE_S(expr) = 66;
expr : EXTEND_BYTE2HALF_S(expr) = 67;
expr : EXTEND_DOUBLE2QUAD_U(expr) = 68;
expr : EXTEND_HALF2QUAD_U(expr) = 69;
expr : EXTEND_BYTE2QUAD_U(expr) = 70;
expr : EXTEND_HALF2DOUBLE_U(expr) = 71;
expr : EXTEND_BYTE2DOUBLE_U(expr) = 72;
expr : EXTEND_BYTE2HALF_U(expr) = 73;
expr : COPY_DATA(expr, expr) = 74;

