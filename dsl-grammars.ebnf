# A. Grammar: Tree Preprocessor; Author: Chubak Bidpaa
## This grammar is used to specify inline trees in C code

tree-decl 	::= "%tree" [ tree-storage ] tree-name [ tree-parent] tree-value [ tree-left ] [ tree-right ] 

tree-storage    ::= "%static" | "%heap" 

tree-name 	::= "%name" tree-ident 
tree-value	::= "%value" tree-node 
tree-parent	::= "%parent" tree-ident 
tree-right 	::= "%right" tree-ident 
tree-left	::= "%left" tree-ident 

tree-ident	::= identifier 
tree-node	::= number | string | identifier 

number		::= ? any valid C numeric value ? 
string		::= ? any valid C string sequence ? 
identifier	::= ? any valid C identifier ? 


# B. Grammar: Exec Substitution Preprocessor; Author: Chubak Bidpaa
## This grammar is used to execute commands inline


execute-shell-inline ::= '`' ? any ascii sequence ? '`' 

# C. Grammar: HerePP; Author: Chubak Bidpaa

here-str	::= here-starts ? valid ascii sequence ? here-ident 

here-starts     ::= ? any ascii sequence ? '=' "<<<" here-ident 

here-ident 	::= "END_" ident "_STR" 

ident 		::= letter { letter | digit | '_' } 

digit 		::= '0' | '1' | ... | '9'
letter 		::= 'A' | 'B' | 'C' | ... | 'z' 


# D. Grammar: Opcode Specifier; Author: Chubak Bidpaa
## This gramamr is used to specify opcodes

opcode-pp	::= opcode-list [ { comment } ]

opcode-list 	::= opcode-decl { ';' opcode-decl }

comment		::= "#" text

opcode-decl	::= '%' opcode-name "of" operand-name

operand-list	::= operand-name { '*' operand-name }

operand-name	::= { lowercase }

opcode-name     ::= { uppercase }

identifier      ::= letter { letter | digit | '_' }

letter 		::= lowercase | uppercase

lowercase	::= 'a' | 'b' | ... | 'z'

uppercase       ::= 'A' | 'B' | ... | 'Z'

text		::= { any-char }

any-char	::= ? any-valid-ASCII-char ?

# E. Grammar: Alloc Preprocessor; Author: Chubak Bidpaa
## This grammar is used to deal with automatic heap allcation in C

preprocessor-directive ::= 
	  '#alloc' [ lexical-scope ] identifier alloc-arguments newline 
	| '#realloc' [ lexical-scope ] identifier realloc-arguments newline

realloc-arguments ::= '(' [ "size=" ] size ',' [ "step=" ] size ')'

alloc-arguments ::= '(' [ "size=" ] size ')'

lexical-scope 	::= "%global" | "%function" identifier

size 		::= ? any-valid-text ?

identifier 	::= letter { letter | digit | '_' }

newline 	::= '\n'

integer-literal ::= digit { digit }

letter 		::= 'a' | 'b' | ... | 'z' | 'A' | 'B' | ... | 'Z'

digit 		::= '0' | '1' | ... | '8' | '9'

# F. Grammar: Assembler Specifier; Author: Chubak Bidpaa
## This grammar is used to specify binarizers (assemblers) for a set of machine opcodes

asmbler-specs      ::= rule { ';' rule } | comment

rule               ::= condition "=>" action newline

action		   ::= "{{" any-text "}}"

condition          ::= "%asm-cond" opcode operand-list

opcode             ::= identifier

operand-list	   ::= operand { ',' operand }

operand            ::= register | immediate

immediate          ::= "%imm" [ '(' ( number | identifier ) ')' ]

register	   ::= "%reg" [ '(' identifier ')' ]

comment            ::= "#" { no-newline } newline

newline            ::= '\n'

number		   ::= { digit }

identifier         ::= letter { letter | digit | '_' }

digit              ::= '0' | '1' | ... | '8' | '9' | 'A' | 'B' | ... 'F'

letter             ::= 'a' | 'b' | ... | 'z' | 'A' | 'B' | ... | 'Z'

any-text	   ::= { any-character }

character	   ::= ? any-character ?

no-newline	   ::= ? any-character-except-newline ?

# G. Grammar: Intermediate Language Opcode Specifier; Author: Chubak Bidpaa
## This grammar is used to specify intermediate representation opcodes

specs           ::= { instruction | comment }

instruction     ::= ir-opcode { ';' ir-opcode }

ir-opcode       ::= opcode group "||" type-list

type-list	::= type { ',' type }

comment         ::= "#" { no-newline } '\n'

group           ::= identifier

type            ::= "%i8" | "%i16" | "%i32" | "%i64"
                    | "%u8" | "%u16" | "%u32" | "%u64"
                    | "%f32" | "%f64" | "%string" | "%memloc" | "%none"

opcode          ::= identifier

identifier      ::= letter { letter | digit | '_' }

number          ::= digit { digit }

no-newline      ::= ? any-character-except-newline ?

letter          ::= 'a' | 'b' | ... | 'z' | 'A' | 'B' | ... | 'Z'

digit           ::= '0' | '1' | ... | '8' | '9'

# H. Grammar: Tree Expression Rewrite Specifier; Author: Chubak Bidpaa
## This grammar is used to specify tree rewrite cases for use with BURS algorithm


main-text	   ::= single-spec { single-spec }

single-spec	   ::= rule | comment

rule               ::= lhs "=>" rhs ( newline ";;" newline )

rhs		   ::= alt-tree { "||" alt-tree }

lhs		   ::= tree

alt-tree	   ::= tree cost

tree               ::= node '(' tree-branches ')' | operand | stub

tree-branches      ::= tree-branch  [ ',' tree-branch ]

tree-branch        ::= operand | tree-inner

operand		   ::= lower { lower | '_' }

stub		   ::= node

node		   ::= upper { upper | '_' }

cost		   ::= '(' number ')'

comment            ::= "#" comment-text newline

number             ::= digit { digit }

comment-text	   ::= no-newline { no-newline }

no-newline         ::= ? any-character-except-newline ?

newline            ::= '\n'

lower		   ::= 'a' | 'b' | ... | 'z'

upper		   ::= 'A' | 'B' | ... | 'Z'

digit              ::= '0' | '1' | ... | '8' | '9'


# I. Grammar: Constant Folding Specifier; Author: Chubak Bidpaa
## This grammar is used to specify constant folding cases

folding-specs	   ::= operation { newline | operation | comment }

operation	   ::= operation-arity opcode operation-name "=>" folding-action
folding-action	   ::= "{{" any-text "}}"

operation-name	   ::= "&addition" | "&subtraction" | "&multiplication" | "&division"
		    | "&modulo" | "&assign" | "&logical_and" | "&logical_or"
		    | "&bitwise_and" | "&bitwise_or" | "&bitwise_xor" | "&left_shift"
		    | "&right_shift" | "&equal_to" | "&not_equal_to" | "&greater_than"
		    | "&less_than" | "&greater_than_or_equal_to" 
		    | "&less_than_or_equal_to" | "&unary_plus" | "&unary_minus" 
		    | "&logical_not" | "&bitwise_not"| "&pre_increment" 
		    | "&pre_decrement" | "&address_of" | "&dereference"


operation-arity	   ::= "%unary" | "%binary"

opcode		   ::= identifier

literal		   ::= character
		    | string
		    | rational-number
		    | whole-number
		    | hex-number

identifier 	   ::= letter { letter | digit | '_' }

letter             ::= 'a' | 'b' | ... | 'z' | 'A' | 'B' | ... | 'Z'

any-text 	   ::= { any-character }

comment		   ::= "-- " no-newline { no-newline } newline

newline		   ::= '\n'

no-quote-newline   ::= ? any-ASCII-character-except-double-quote-or-newline ?

no-newline	   ::= ? any-ASCII-character-except-newline ?

any-text	   ::= any-character { any-character }

any-character 	   ::= ? any-valid-ASCII-char ?


# J. Grammar: Computation Reduction Specifier; Author: Chubak Bidpaa
## This grammar is used to specify cases of computation reduction in the IR, for example, variable induction in loops

main-specs           ::= { reduction-rule-list | comment }

reduction-rule-list  ::= reduction-rule { "\n" reduction-rule }

reduction-rule       ::= lhs "=>" rhs

rhs                  ::= "{{" { rhs-content } "}}"

rhs-content          ::= text | '$' label

lhs                  ::= s-expression | labeled-s-expression

labeled-s-expression  ::= label "::" s-expression

s-expression         ::= atom | list

label                ::= '{' number '}'

number               ::= digit { digit }

list                 ::= '(' atom-list ')'

atom-list            ::= atom { atom }

atom                 ::= legal-char { legal-char }

legal-char           ::= letter | digit | punct

punct                ::= '-' | '/' | '=' 
                     | '!' | '^' | '>'
                     | '#' | '|' | '&'
                     | '*' | '\' | '<'
                     | '"' | "'" | '%'

digit                ::= '0' | '1' | ... | '9'

letter               ::= 'A' | 'B' | ... | 'z' 

comment              ::= "-- " comment-text newline

comment-text         ::= no-newline { no-newline }

newline              ::= '\n'

no-newline           ::= ? any-ASCII-character-except-newline ?

text                 ::= any-char { any-char }

any-char             ::= ? any-ASCII-character ?

# K. Grammar: Intermediate ML-like-to-C SDT Grammar; Author Chubak Bidpaa
## This grammar is a subset of ML, some DSLs are translated to this language --- and this language in turn is translated down to C

## Note: In ML, everything is an expression, and we don't have statements

program            ::= { declaration }

declaration        ::= function-declaration 
		    | variable-declaration 
		    | define-type
		    | define-record

function-declaration ::= "fun" identifier '(' [ parameter-list ] ')' ':' type '=' expression

variable-declaration ::= "val" identifier ':' type '=' expression

parameter-list     ::= identifier { ',' identifier }


define-record 	   ::= "record" identifier '=' record

record		   ::= '{' record-pair-list '}'

record-pair-list   ::= record-pair { ';' record-pair }

record-pair	   ::= identifier ':' type

record-inst-pair   ::= identifier '=' ( identifier-pattern | literal-pattern )

define-type   	   ::= "type" user-defined-type '=' type-variant-list

type-variant-list  ::= type-variant { '|' type-variant }

type-variant	   ::= identifier [ "of" type-list ]

type-list	   ::= type { '*' type }

type               ::= "int" 
                   | "float" 
                   | "bool" 
                   | "char" 
                   | "string" 
                   | user-defined-type


user-defined-type  ::= identifier

for-expression     ::= "for" expression "in" expression "do" expression "done"

if-expression	   ::= "if" expression "then" expressio "else" expression "fi"

expression         ::= literal
                   | identifier
                   | '(' expression ')'
		   | identifier '(' ( identifier-pattern | literal-pattern ) ')'
                   | record-inst-pair
		   | expression binary-operator expression
                   | unary-operator expression
                   | match expression with pattern-matches
		   | if-expression
		   | for-expression
		   | local-expression
		   | assignment-expression
		

local-expression   ::= "local" { expression } "in" { expression } "end"

assignment-expression ::= "let" identifier '=' expression "in"

literal            ::= integer-literal 
 		   | hex-integer-literal
		   | bin-integer-literal
		   | oct-integer-literal
                   | float-literal 
                   | bool-literal 
                   | char-literal 
                   | string-literal

oct-integer-literal   ::= oct-digit { oct-digit } 'O'

bin-integer-literal ::= bin-digit { bin-digit } 'B'

hex-integer-literal ::= hex-digit { hex-digit } 'H'

integer-literal    ::= digit { digit }

float-literal      ::= digit { digit } '.' digit { digit }

bool-literal       ::= "true" | "false"

char-literal       ::= "'" any-char "'"

string-literal     ::= '"' { any-char } '"'

binary-operator    ::= '+' | '-' | '*' | '/' | "==" | "!=" | '<' | '>' | "<=" | ">=" | "&&" | "||"

unary-operator     ::= '-' | "!" | "++" | "--"

argument-list      ::= expression { ',' expression }

identifier         ::= letter { letter | digit | "_" }

letter             ::= lowercase | uppercase

lowercase         ::= 'a' | 'b' | ... | 'z'

uppercase         ::= 'A' | 'B' | ... | 'Z'

any-char          ::= ? any-valid-ASCII-char ?

bin-digit	  ::= '0' | '1' 

oct-digit	  ::= '0' | '1' | ... | '7'

hex-digit	  ::= digit | 'A' | 'B' | ... | 'F' | 'a' | 'b' | ... | 'f'

digit             ::= '0' | '1' | ... | '8' | '9'

match             ::= "match" expression "with" pattern-matches

pattern-matches   ::= pattern-match { '|' pattern-match }

pattern-match     ::= pattern "->" expression

pattern           ::= literal-pattern | identifier-pattern

literal-pattern   ::= integer-literal | float-literal | bool-literal | char-literal | string-literal

identifier-pattern ::= identifier [ '(' literal-pattern ')' ]


# L. Grammar: Type & Sigil Specifier DSL; Author: Chubak Bidpaa
## The following DSL specifies a set of types and sigils for the intermediate representation, with the ability to specify how aggregate types may be specified in the grammar and what their reproduction should be











no-newline	::= ? any-ascii-character-except-newline ?
any-char	::= ? any-ascii-character ?
